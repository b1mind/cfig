{
  //> Workbench
  "window.zoomLevel": 0,
  "explorer.openEditors.visible": 0,
  "workbench.sideBar.location": "right",
  "workbench.colorTheme": "One Dark Pro",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "newUntitledFile",
  "workbench.editor.closeEmptyGroups": true,
  "workbench.editor.scrollToSwitchTabs": true,
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.list.automaticKeyboardNavigation": false,
  "workbench.colorCustomizations": {
    "editorCursor.background": "#282c34",
    "editorCursor.foreground": "#99ff80",
    "editor.selectionBackground": "#4a5261a1",
    "editor.selectionHighlightBorder": "#3c537e4b",
    "editor.selectionHighlightBackground": "#3c537e4b",
    "numberedBookmarks.overviewRuler": "#0099ff",
    "statusBar.background": "#282c34",
    "statusBar.noFolderBackground": "#282c34",
    "statusBar.debuggingBackground": "#282c34",
    "statusBar.foreground": "#9da5b4"
  },
  "numberedBookmarks.gutterIconFillColor": "#0099ff",
  "numberedBookmarks.gutterIconNumberColor": "#eee",
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  //> editor
  "zenMode.hideLineNumbers": false,
  "zenMode.hideStatusBar": false,
  "editor.lineNumbers": "relative",
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "editor.colorDecorators": true,
  "editor.minimap.enabled": false,
  "editor.fontFamily": "'Fira Code','Delugia', 'Iosevka', 'Monaco', 'Consolas', 'monospace' ",
  "editor.fontLigatures": true,
  "editor.fontSize": 14,
  "editor.lineHeight": 0,
  "editor.acceptSuggestionOnEnter": "smart",
  "extensions.autoUpdate": false,
  "editor.formatOnPaste": true,
  "editor.peekWidgetDefaultFocus": "editor",
  "settingsSync.ignoredSettings": ["editor.lineNumbers", "workbench.colorCustomizations"],
  "diffEditor.renderSideBySide": false,
  "breadcrumbs.showVariables": false,
  "breadcrumbs.showConstants": false,

  //> Terminal
  "terminal.integrated.shell.windows": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
  "terminal.integrated.shellArgs.windows": ["-nologo"],
  "terminal.integrated.fontFamily": "Fira Code, 'Monaco', 'Consolas','monospace'",
  "terminal.integrated.fontSize": 12,
  "terminal.integrated.commandsToSkipShell": [
    // Ensure the toggle sidebar visibility keybinding skips the shell
    "workbench.action.toggleSidebarVisibility",
    // Send quick open's keybinding to the shell
    "-workbench.action.quickOpen"
  ],

  //> Prettier
  "prettier.jsxSingleQuote": true,
  "prettier.semi": false,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "all",
  "prettier.arrowParens": "avoid",
  "editor.formatOnSave": true,
  "prettier.quoteProps": "preserve",
  "prettier.endOfLine": "auto",
  "prettier.printWidth": 100,
  "prettier.vueIndentScriptAndStyle": true,

  //> More extention settings

  "sync.quietSync": true,
  // "git.autofetch": true,

  //> Todo
  "todo.file.view.expanded": false,
  "todo.embedded.view.expanded": false,
  //prettier-ignore
  "todo.file.exclude": [ "**/.!(todo|todos|task|tasks)/**", "**/*.html", "**/*.css", "**/.json", "**/env/**", "**/static/admin/**", "**/node_modules/**", "**/__sapper__/**" ],
  //prettier-ignore
  "todo.embedded.exclude": [ "**/.!(todo|todos|task|tasks)/**", "**/*.html", "**/*.css", "**/.json", "**/env/**", "**/staticfiles/**", "**/node_modules/**", "**/__sapper__/**" ],

  //> live server and sass
  "liveServer.settings.donotShowInfoMsg": true,
  "liveSassCompile.settings.formats": [
    { "format": "compressed", "extensionName": ".min.css" },
    { "format": "expanded", "extensionName": ".css" }
  ],
  "liveSassCompile.settings.generateMap": false,
  "liveSassCompile.settings.autoprefix": ["> 1%", "last 2 versions"],

  //> comments
  "editor.tokenColorCustomizations": {
    "comments": "#707070",
    "textMateRules": [
      {
        "scope": "punctuation.definition.comment",
        "settings": { "foreground": "#707070" }
      }
    ]
  },

  //> better comments

  "better-comments.highlightPlainText": true,
  //prettier-ignore
  "better-comments.tags": [
		{ "tag": "todo", "color": "#fbff00", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "fixme", "color": "#ff2d00", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "!", "color": "#a20000", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "?", "color": "#757500", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "//", "color": "#444444", "strikethrough": true, "backgroundColor": "transparent" },
		{ "tag": "*", "color": "#FF8C00", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "@", "color": "#00ff5a", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": ">", "color": "#007aff", "strikethrough": false, "backgroundColor": "transparent" },
		{ "tag": "<", "color": "#1c4d89", "strikethrough": false, "backgroundColor": "transparent" }
	],

  //>auto prefixer
  "less.lint.propertyIgnoredDueToDisplay": "error",
  "svelte.language-server.runtime": "C:\\Program Files\\nodejs\\node.exe",

  //> VIM settings
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": false,
  "vim.leader": "<space>",
  "vim.replaceWithRegister": true,
  "vim.camelCaseMotion.enable": true,
  // "vim.sneak": true,
  "vim.statusBarColorControl": true,
  "vim.statusBarColors.normal": ["#282c34", "#9da5b4"],
  "vim.statusBarColors.insert": ["#99ff80", "#000000"],
  "vim.statusBarColors.visual": ["#4a5261", "#9da5b4"],
  "vim.statusBarColors.visualline": ["#4a5261", "#99ff80"],
  "vim.statusBarColors.visualblock": ["#007ACC", "#9da5b4"],
  "vim.statusBarColors.replace": ["#D93D3D", "#282c34"],
  "vim.statusBarColors.commandlineinprogress": ["#181F2B", "#99ff80"],
  "vim.statusBarColors.searchinprogressmode": ["#181F2B", "#99ff80"],
  "vim.statusBarColors.surroundinputmode": ["#007ACC", "#9da5b4"],

  "vim.handleKeys": {
    // "<C-a>": false,
    // "<C-d>": false,
    // "<C-f>": false,
    // "<C-v>": false,
    "<C-w>": false,
    "<C-r>": false
  },

  "vim.insertModeKeyBindings": [
    { "before": [";"], "after": ["<Esc>"] },
    //todo make a paste from vim register for insert?
    // { "before": ["<C-p>"], "after": ["<Esc>", "p", "i"] }
    { "before": ["<C-p>"], "after": ["\"", "*", "p"] }
  ],

  "vim.visualModeKeyBindings": [
    { "before": [";"], "after": ["<Esc>"] },
    { "before": ["s"], "after": ["S"] },
    { "before": [","], "after": ["%"] },
    { "before": [">"], "commands": ["editor.action.indentLines"] },
    { "before": ["<"], "commands": ["editor.action.outdentLines"] },
    { "before": ["J"], "commands": ["editor.action.moveLinesDownAction"] },
    { "before": ["K"], "commands": ["editor.action.moveLinesUpAction"] },
    { "before": ["<leader>", "a"], "after": ["^"] },
    { "before": ["<leader>", "'"], "after": ["$"] },
    { "before": ["r"], "after": ["g", "r"] }
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    //< movment remap defaults
    { "before": [","], "after": ["%"] },
    // { "before": ["["], "after": ["}"] },
    // { "before": ["]"], "after": ["{"] },
    { "before": ["K"], "after": ["{", "k"] },
    { "before": ["J"], "after": ["}", "j"] },
    { "before": ["L"], "after": ["W"] },
    { "before": ["H"], "after": ["B"] },
    { "before": ["Q"], "after": ["@"] },
    //< Redo and Replace remaps
    { "before": ["U"], "after": ["<C-r>"] },
    { "before": ["S"], "after": ["R"] },
    { "before": ["R"], "after": ["r"] },
    { "before": ["r"], "after": ["g", "r"] },

    //< makes camelCase overwrite web default
    { "before": ["w"], "after": ["<leader>", "w"] },
    { "before": ["e"], "after": ["<leader>", "e"] },
    { "before": ["b"], "after": ["<leader>", "b"] },

    { "before": ["<leader>", ";"], "after": ["$", "a", ";", "<Esc>"] },
    { "before": ["<leader>", ","], "after": ["$", "a", ",", "<Esc>"] },
    { "before": ["<leader>", "p"], "after": ["\"", "*", "p"] },
    { "before": ["<leader>", "r"], "after": ["\"", "*", "g", "r"] },

    //< leader binds for
    { "before": ["<leader>", "j"], "after": ["L"] },
    { "before": ["<leader>", "k"], "after": ["H"] },
    { "before": ["<leader>", "m"], "after": ["M"] },
    { "before": ["<leader>", "a"], "after": ["^"] },
    { "before": ["<leader>", "'"], "after": ["$"] },
    { "before": ["<leader>", "h"], "after": ["J"] },
    //todo refactor to break after spaces
    { "before": ["<leader>", "l"], "after": ["a", "<Enter>", "<Esc>"] },
    { "before": ["<leader>", "f"], "after": ["z", "z"] },
    { "before": ["<leader>", "n"], "after": ["#", "*"] },
    { "before": ["<leader>", "o"], "after": ["o", "<Esc>", "O"] },
    { "before": ["<leader>", "s"], "commands": [":w"] },
    { "before": ["<leader>", "q"], "commands": [":wq"] },
    { "before": ["<leader>", "t"], "after": [":", "t", "a", "b", "m"] },

    //< for fast ci style ({edits})
    { "before": ["<leader>", ")"], "after": ["/", ")", "<Enter>", "i"] },
    { "before": ["<leader>", "("], "after": ["/", ")", "<Enter>", "c", "i", ")"] },
    { "before": ["<leader>", "]"], "after": ["/", "]", "<Enter>", "i"] },
    { "before": ["<leader>", "["], "after": ["/", "]", "<Enter>", "c", "i", "]"] },
    { "before": ["<leader>", "}"], "after": ["/", "}", "<Enter>", "i"] },
    { "before": ["<leader>", "{"], "after": ["/", "}", "<Enter>", "c", "i", "}"] },

    //< vsCode bindings
    { "before": [">"], "commands": ["editor.action.indentLines"] },
    { "before": ["<"], "commands": ["editor.action.outdentLines"] },
    { "before": ["g", "p"], "commands": ["editor.action.peekDefinition"] },

    //< vsCode leader bindings
    { "before": ["<leader>", "/"], "commands": ["workbench.action.quickOpen"] },
    { "before": ["<leader>", "<Enter>"], "commands": ["workbench.action.showCommands"] },
    {
      "before": ["<leader>", "<leader>", "<leader>"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    // { "before": ["<leader>", "r"], "commands": ["editor.action.rename"] },
    // { "before": ["<leader>", "<leader>", "<Enter>"], "commands": ["workbench.action.terminal.toggleTerminal"] },
    { "before": ["<leader>", "<leader>", "e"], "commands": ["workbench.view.explorer"] },
    { "before": ["<leader>", "<leader>", "g"], "commands": ["workbench.view.scm"] },
    { "before": ["<leader>", "<leader>", "t"], "commands": ["workbench.view.extension.todo"] },
    { "before": ["<leader>", "<leader>", "l"], "commands": ["settings.cycle.lineNumber"] },
    { "before": ["<leader>", "<leader>", "b"], "commands": ["breadcrumbs.focusAndSelect"] },

    //< For Number Bookmarks vim leader bindings
    { "before": ["<leader>", "<leader>", "1"], "commands": ["numberedBookmarks.toggleBookmark1"] },
    { "before": ["<leader>", "<leader>", "2"], "commands": ["numberedBookmarks.toggleBookmark2"] },
    { "before": ["<leader>", "<leader>", "3"], "commands": ["numberedBookmarks.toggleBookmark3"] },
    { "before": ["<leader>", "<leader>", "4"], "commands": ["numberedBookmarks.toggleBookmark4"] },
    { "before": ["<leader>", "<leader>", "5"], "commands": ["numberedBookmarks.toggleBookmark5"] },
    { "before": ["<leader>", "<leader>", "6"], "commands": ["numberedBookmarks.toggleBookmark6"] },
    { "before": ["<leader>", "<leader>", "7"], "commands": ["numberedBookmarks.toggleBookmark7"] },
    { "before": ["<leader>", "<leader>", "8"], "commands": ["numberedBookmarks.toggleBookmark8"] },
    { "before": ["<leader>", "<leader>", "9"], "commands": ["numberedBookmarks.toggleBookmark9"] },
    { "before": ["<leader>", "<leader>", "0"], "commands": ["numberedBookmarks.toggleBookmark0"] },

    //todo rebind for jumping lines? easy enough to use ctrl+int
    { "before": ["<leader>", "1"], "commands": ["numberedBookmarks.jumpToBookmark1"] },
    { "before": ["<leader>", "2"], "commands": ["numberedBookmarks.jumpToBookmark2"] },
    { "before": ["<leader>", "3"], "commands": ["numberedBookmarks.jumpToBookmark3"] },
    { "before": ["<leader>", "4"], "commands": ["numberedBookmarks.jumpToBookmark4"] },
    { "before": ["<leader>", "5"], "commands": ["numberedBookmarks.jumpToBookmark5"] },
    { "before": ["<leader>", "6"], "commands": ["numberedBookmarks.jumpToBookmark6"] },
    { "before": ["<leader>", "7"], "commands": ["numberedBookmarks.jumpToBookmark7"] },
    { "before": ["<leader>", "8"], "commands": ["numberedBookmarks.jumpToBookmark8"] },
    { "before": ["<leader>", "9"], "commands": ["numberedBookmarks.jumpToBookmark9"] },
    { "before": ["<leader>", "0"], "commands": ["numberedBookmarks.jumpToBookmark0"] }

    /* 		//todo  vim leader bindings; remake for something else use alt+keys todo+
		{
			"before": ["<leader>", "<leader>", "d"],
			"commands": ["todo.toggleDone"],
			"when": ["resourceExtname == .todo"]
		},
		{
			"before": ["<leader>", "<leader>", "s"],
			"commands": ["todo.toggleStart"],
			"when": ["resourceExtname == .todo"]
		},
		{
			"before": ["<leader>", "<leader>", "c"],
			"commands": ["todo.toggleCancelled"],
			"when": ["resourceExtname == .todo"]
		},
		{
			"before": ["<leader>", "<leader>", "a"],
			"commands": ["todo.archive"],
			"when": ["resourceExtname == .todo"]
    }
    */
  ],

  //> settings.cycle create any command combos for vsCode
  "settings.cycle": [
    {
      "id": "lineNumber",
      "overrideWorkspaceSettings": true,
      "values": [{ "editor.lineNumbers": "on" }, { "editor.lineNumbers": "relative" }]
    }
  ],

  //> cSpell spell better
  "cSpell.language": "en, lorem",
  "cSpell.enableFiletypes": ["svelte"],
  //prettier-ignore
  "cSpell.userWords": [
    "Browserslist",
    "afterbegin",
    "autoplace",
    "autoprefix",
    "barba",
    "basepath",
    "beforeend",
    "burlywood",
    "cadetblue",
    "codepen",
    "crossorigin",
    "csrf",
    "darkgrey",
    "dedupe",
    "degit",
    "draggable",
    "draggables",
    "droppable",
    "figcaption",
    "flexbox",
    "ghpages",
    "greensock",
    "greenyellow",
    "gsap",
    "gsapper",
    "keydown",
    "killa",
    "lightblue",
    "lightgrey",
    "mdsvex",
    "minmax",
    "monsta",
    "ms",
    "ms flexbox",
    "nums",
    "onwarn",
    "prefetch",
    "prefetches",
    "rgba",
    "scrollbar",
    "scroller",
    "serviceworker",
    "sirv",
    "skyblue",
    "soluta",
    "successkid",
    "tempora",
    "todos",
    "token",
    "trippy",
    "typeof"
  ]
}
